{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "OMNeT++ NED",
	"patterns": [
		{
			"include": "#sections"
		},
		{
			"include": "#brackets"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#properties"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#numerics"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#delimiters"
		},
		{
			"include": "#terminator"
		}
	],
	"repository": {
		"sections": {
			"patterns": [
				{
					"name": "meta.definition.component.ned",
					"match": "^\\s*\\b(channel|channelinterface|simple|module|network|moduleinterface)\\s+(\\b\\w*)(?:\\s+(\\bextends)\\s+(\\b\\w*))?\\s*",
					"captures": {
						"1": {
							"name": "storage.type.ned"
						},
						"2": {
							"name": "entity.name.class.ned"
						},
						"3": {
							"name": "storage.modifier.ned"
						},
						"4": {
							"name": "entity.other.inherited-class"
						}
					}
				}
			]
		},
		"brackets": {
			"patterns": [
				{
					"begin": "{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.block.begin.ned"
						}
					},
					"end": "}",
					"endCaptures": {
						"0": {
							"name": "punctuation.block.end.ned"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.parentheses.begin.ned"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.parentheses.end.ned"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"match": "\\[|\\]",
					"name": "punctuation.brackets.ned"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.functions.ned",
					"match": "\\b(acos|asin|atan|atan2|bernoulli|beta|binomial|cauchy|ceil|chi_square|cos|default|erlang_k|exp|exponential|fabs|floor|fmod|gamma_d|genk_exponential|genk_intuniform|genk_normal|genk_truncnormal|genk_uniform|geometric|hypergeometric|hypot|intuniform|log|log10|lognormal|max|min|negbinomial|normal|pareto_shifted|poisson|pow|simTime|sin|sqrt|student_t|tan|triang|truncnormal|uniform|weibull|xml|xmldoc)(?=\\(.*\\))"
				},
				{
					"name": "keyword.special.ned",
					"match": "(-->|<--|<-->|\\.\\.)"
				},
				{
					"name": "keyword.ned",
					"match": "\\b(parameters|gates|types|submodules|connections|allowunconnected|for|if|import|like|package|property|sizeof|const|default|ask|this|index|typename|xmldoc)\\b"
				},
				{
					"name": "keyword.types.ned",
					"match": "\\b(inout|input|output|bool|double|int|string|xml|volatile)\\b"
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"name": "constant.language.ned",
					"match": "\\b(true|false)\\b"
				}
			]
		},
		"properties": {
			"begin": "(@\\w+)(?:(\\[)\\w+(\\]))?(\\()",
			"beginCaptures": {
				"1": {
					"name": "entity.name.function.property.ned"
				},
				"2": {
					"name": "punctuation.brackets.begin.ned"
				},
				"3": {
					"name": "punctuation.brackets.end.ned"
				},
				"4": {
					"name": "punctuation.definition.propertyparams.begin.ned"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.propertyparams.end.ned"
				}
			},
			"patterns": [
				{
					"include": "#strings"
				},
				{
					"include": "#numerics"
				},
				{
					"include": "#delimiters"
				},
				{
					"include": "#constants"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.ned",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.ned",
					"match": "\\\\(x[\\dA-Fa-f]{2}|b|f|n|r|t|\\\\|\")"
				}
			]
		},
		"numerics": {
			"name": "constant.numeric.ned",
			"match": "(0x[\\dA-Fa-f]+|\\d+(?:\\.\\d+)?|nan|-?inf)"
		},
		"comments": {
			"patterns": [
				{
					"name": "comment.line.double-slash.ned",
					"begin": "\/\/",
					"end": "$\\n?"
				}
			]
		},
		"delimiters": {
			"patterns": [
				{
					"match": ",",
					"name": "punctuation.other.comma.ned"
				},
				{
					"match": "\\.",
					"name": "punctuation.other.period.ned"
				},
				{
					"match": ":(?!=)",
					"name": "punctuation.other.colon.ned"
				}
			]
		},
		"terminator": {
			"name": "punctuation.terminator.ned",
			"match": ";"
		}
	},
	"scopeName": "source.ned"
}